{"version":3,"sources":["logo.svg","components/FormView.js","components/Question.js","components/Search.js","components/QuestionView.js","components/Header.js","components/QuizView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","FormView","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","submitQuestion","event","preventDefault","$","ajax","url","type","dataType","contentType","data","JSON","stringify","question","state","answer","difficulty","category","xhrFields","withCredentials","crossDomain","success","result","document","getElementById","reset","error","alert","handleChange","setState","defineProperty","target","name","value","categories","_this2","_this3","react_default","a","createElement","id","className","onSubmit","onChange","keys","map","key","Component","Question","visibleAnswer","_this$props","src","concat","onClick","questionAction","flipVisibility","style","visibility","Search","query","getInfo","submitSearch","handleInputChange","search","placeholder","ref","input","QuestionView","getQuestions","page","questions","totalQuestions","total_questions","currentCategory","current_category","getByCategory","searchTerm","action","window","confirm","num","pageNumbers","maxPage","Math","ceil","_loop","i","push","selectPage","_this4","components_Search","q","ind","components_Question","createPagination","Header","uri","location","href","origin","navTo","QuizView","selectCategory","_ref","_ref$id","quizCategory","getNextQuestion","previousQuestions","toConsumableArray","currentQuestion","previous_questions","quiz_category","showAnswer","lastQuestion","last_question","guess","forceEnd","submitGuess","replace","toLowerCase","evaluate","evaluateAnswer","numCorrect","restartGame","formatGuess","split","includes","renderFinalScore","renderCorrectAnswer","renderPlay","renderPrePlay","App","components_Header","path","react_router_dom","react_router","exact","component","Boolean","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8200d30.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport $ from 'jquery';\n\nimport '../stylesheets/FormView.css';\n\nclass FormView extends Component {\n  constructor(props){\n    super();\n    this.state = {\n      question: \"\",\n      answer: \"\",\n      difficulty: 1,\n      category: 1,\n      categories: {}\n    }\n  }\n\n  componentDidMount(){\n    $.ajax({\n      url: `https://trivia-app-gmc.herokuapp.com/categories`, //TODO: update request URL\n      type: \"GET\",\n      success: (result) => {\n        this.setState({ categories: result.categories })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load categories. Please try your request again')\n        return;\n      }\n    })\n  }\n\n\n  submitQuestion = (event) => {\n    event.preventDefault();\n    $.ajax({\n      url: 'https://trivia-app-gmc.herokuapp.com/questions/add', //TODO: update request URL\n      type: \"POST\",\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        question: this.state.question,\n        answer: this.state.answer,\n        difficulty: this.state.difficulty,\n        category: this.state.category\n      }),\n      xhrFields: {\n        withCredentials: true\n      },\n      crossDomain: true,\n      success: (result) => {\n        document.getElementById(\"add-question-form\").reset();\n        return;\n      },\n      error: (error) => {\n        alert('Unable to add question. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  handleChange = (event) => {\n    this.setState({[event.target.name]: event.target.value})\n  }\n\n  render() {\n    return (\n      <div id=\"add-form\">\n        <h2>Add a New Trivia Question</h2>\n        <form className=\"form-view\" id=\"add-question-form\" onSubmit={this.submitQuestion}>\n          <label>\n            Question\n            <input type=\"text\" name=\"question\" onChange={this.handleChange}/>\n          </label>\n          <label>\n            Answer\n            <input type=\"text\" name=\"answer\" onChange={this.handleChange}/>\n          </label>\n          <label>\n            Difficulty\n            <select name=\"difficulty\" onChange={this.handleChange}>\n              <option value=\"1\">1</option>\n              <option value=\"2\">2</option>\n              <option value=\"3\">3</option>\n              <option value=\"4\">4</option>\n              <option value=\"5\">5</option>\n            </select>\n          </label>\n          <label>\n            Category\n            <select name=\"category\" onChange={this.handleChange}>\n              {Object.keys(this.state.categories).map(id => {\n                  return (\n                    <option key={id} value={id}>{this.state.categories[id]}</option>\n                  )\n                })}\n            </select>\n          </label>\n          <input type=\"submit\" className=\"button\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default FormView;\n","import React, { Component } from 'react';\nimport '../stylesheets/Question.css';\n\nclass Question extends Component {\n  constructor(){\n    super();\n    this.state = {\n      visibleAnswer: false\n    }\n  }\n\n  flipVisibility() {\n    this.setState({visibleAnswer: !this.state.visibleAnswer});\n  }\n\n  render() {\n    const { question, answer, category, difficulty } = this.props;\n    return (\n      <div className=\"Question-holder\">\n        <div className=\"Question\">{question}</div>\n        <div className=\"Question-status\">\n          <img className=\"category\" src={`${category}.svg`}/>\n          <div className=\"difficulty\">Difficulty: {difficulty}</div>\n          <img src=\"delete.png\" className=\"delete\" onClick={() => this.props.questionAction('DELETE')}/>\n          \n        </div>\n        <div className=\"show-answer button\"\n            onClick={() => this.flipVisibility()}>\n            {this.state.visibleAnswer ? 'Hide' : 'Show'} Answer\n          </div>\n        <div className=\"answer-holder\">\n          <span style={{\"visibility\": this.state.visibleAnswer ? 'visible' : 'hidden'}}>Answer: {answer}</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Question;\n","import React, { Component } from 'react'\n\nclass Search extends Component {\n  state = {\n    query: '',\n  }\n\n  getInfo = (event) => {\n    event.preventDefault();\n    this.props.submitSearch(this.state.query)\n  }\n\n  handleInputChange = () => {\n    this.setState({\n      query: this.search.value\n    })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.getInfo}>\n        <input\n          placeholder=\"Search questions...\"\n          ref={input => this.search = input}\n          onChange={this.handleInputChange}\n        />\n        <input type=\"submit\" value=\"Submit\" className=\"button\"/>\n      </form>\n    )\n  }\n}\n\nexport default Search\n","import React, { Component } from 'react';\r\n\r\nimport '../stylesheets/App.css';\r\nimport Question from './Question';\r\nimport Search from './Search';\r\nimport $ from 'jquery';\r\n\r\nclass QuestionView extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      questions: [],\r\n      page: 1,\r\n      totalQuestions: 0,\r\n      categories: {},\r\n      currentCategory: null,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getQuestions();\r\n  }\r\n\r\n  getQuestions = () => {\r\n    $.ajax({\r\n      url: `https://trivia-app-gmc.herokuapp.com/questions?page=${this.state.page}`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({\r\n          questions: result.questions,\r\n          totalQuestions: result.total_questions,\r\n          categories: result.categories,\r\n          currentCategory: result.current_category })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load questions. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  selectPage(num) {\r\n    this.setState({page: num}, () => this.getQuestions());\r\n  }\r\n\r\n  createPagination(){\r\n    let pageNumbers = [];\r\n    let maxPage = Math.ceil(this.state.totalQuestions / 10)\r\n    for (let i = 1; i <= maxPage; i++) {\r\n      pageNumbers.push(\r\n        <span\r\n          key={i}\r\n          className={`page-num ${i === this.state.page ? 'active' : ''}`}\r\n          onClick={() => {this.selectPage(i)}}>{i}\r\n        </span>)\r\n    }\r\n    return pageNumbers;\r\n  }\r\n\r\n  getByCategory= (id) => {\r\n    $.ajax({\r\n      url: `https://trivia-app-gmc.herokuapp.com/categories/${id}/questions`, //TODO: update request URL\r\n      type: \"GET\",\r\n      success: (result) => {\r\n        this.setState({\r\n          questions: result.questions,\r\n          totalQuestions: result.total_questions,\r\n          currentCategory: result.current_category })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load questions. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  submitSearch = (searchTerm) => {\r\n    $.ajax({\r\n      url: `https://trivia-app-gmc.herokuapp.com/questions/search`, //TODO: update request URL\r\n      type: \"POST\",\r\n      dataType: 'json',\r\n      contentType: 'application/json',\r\n      data: JSON.stringify({searchTerm: searchTerm}),\r\n      xhrFields: {\r\n        withCredentials: true\r\n      },\r\n      crossDomain: true,\r\n      success: (result) => {\r\n        this.setState({\r\n          questions: result.questions,\r\n          totalQuestions: result.total_questions,\r\n          currentCategory: result.current_category })\r\n        return;\r\n      },\r\n      error: (error) => {\r\n        alert('Unable to load questions. Please try your request again')\r\n        return;\r\n      }\r\n    })\r\n  }\r\n\r\n  questionAction = (id) => (action) => {\r\n    if(action === 'DELETE') {\r\n      if(window.confirm('are you sure you want to delete the question?')) {\r\n        $.ajax({\r\n          url: `https://trivia-app-gmc.herokuapp.com/questions/${id}`, //TODO: update request URL\r\n          type: \"DELETE\",\r\n          success: (result) => {\r\n            this.getQuestions();\r\n          },\r\n          error: (error) => {\r\n            alert('Unable to load questions. Please try your request again')\r\n            return;\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"question-view\">\r\n        <div className=\"categories-list\">\r\n          <h2 onClick={() => {this.getQuestions()}}>Categories</h2>\r\n          <ul>\r\n            {Object.keys(this.state.categories).map((id, ) => (\r\n              <li key={id} onClick={() => {this.getByCategory(id)}}>\r\n                {this.state.categories[id]}\r\n                <img className=\"category\" src={`${this.state.categories[id]}.svg`}/>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <Search submitSearch={this.submitSearch}/>\r\n        </div>\r\n        <div className=\"questions-list\">\r\n          <h2>Questions</h2>\r\n          {this.state.questions.map((q, ind) => (\r\n            <Question\r\n              key={q.id}\r\n              question={q.question}\r\n              answer={q.answer}\r\n              category={this.state.categories[q.category]} \r\n              difficulty={q.difficulty}\r\n              questionAction={this.questionAction(q.id)}\r\n            />\r\n          ))}\r\n          <div className=\"pagination-menu\">\r\n            {this.createPagination()}\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuestionView;\r\n","import React, { Component } from 'react';\nimport logo from '../logo.svg';\nimport '../stylesheets/Header.css';\n\nclass Header extends Component {\n\n  navTo(uri){\n    window.location.href = window.location.origin + uri;\n  }\n\n  render() {\n    return (\n      <div className=\"App-header\">\n        <h1 onClick={() => {this.navTo('')}}>Trivia</h1>\n        <h2 onClick={() => {this.navTo('')}}>List</h2>\n        <h2 onClick={() => {this.navTo('/add')}}>Add</h2>\n        <h2 onClick={() => {this.navTo('/play')}}>Play</h2>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport $ from 'jquery';\n\nimport '../stylesheets/QuizView.css';\n\n\nclass QuizView extends Component {\n  constructor(props){\n    super();\n    this.state = {\n        quizCategory: null,\n        previousQuestions: [], \n        showAnswer: false,\n        categories: {},\n        numCorrect: 0,\n        currentQuestion: {},\n        lastQuestion: false,\n        guess: '',\n        forceEnd: false\n    }\n  }\n\n  componentDidMount(){\n    $.ajax({\n      url: `https://trivia-app-gmc.herokuapp.com/categories`, //TODO: update request URL\n      type: \"GET\",\n      success: (result) => {\n        this.setState({ categories: result.categories })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load categories. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  \n\n  selectCategory = ({type, id=0}) => {\n    this.setState({quizCategory: {type, id}}, this.getNextQuestion)\n  }\n\n  handleChange = (event) => {\n    this.setState({[event.target.name]: event.target.value})\n  }\n\n  getNextQuestion = () => {\n    const previousQuestions = [...this.state.previousQuestions]\n    if(this.state.currentQuestion.id) { previousQuestions.push(this.state.currentQuestion.id) }\n\n    $.ajax({\n      url: 'https://trivia-app-gmc.herokuapp.com/quizzes', //TODO: update request URL\n      type: \"POST\",\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        previous_questions: previousQuestions,\n        quiz_category: this.state.quizCategory\n      }),\n      xhrFields: {\n        withCredentials: true\n      },\n      crossDomain: true,\n      success: (result) => {\n        this.setState({\n          showAnswer: false,\n          previousQuestions: previousQuestions,\n          currentQuestion: result.question,\n          lastQuestion: result.last_question,\n          guess: '',\n          forceEnd: result.question ? false : true\n        })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load question. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  submitGuess = (event) => {\n    event.preventDefault();\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\n    let evaluate =  this.evaluateAnswer()\n    this.setState({\n      numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n      showAnswer: true,\n    })\n  }\n\n  restartGame = () => {\n    this.setState({\n      quizCategory: null,\n      previousQuestions: [], \n      showAnswer: false,\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false\n    })\n  }\n\n  renderPrePlay(){\n      return (\n          <div className=\"quiz-play-holder\">\n              <div className=\"choose-header\">Choose Category</div>\n              <div className=\"category-holder\">\n                  <div className=\"play-category\" onClick={this.selectCategory}>ALL</div>\n                  {Object.keys(this.state.categories).map(id => {\n                  return (\n                    <div\n                      key={id}\n                      value={id}\n                      className=\"play-category\"\n                      onClick={() => this.selectCategory({type:this.state.categories[id], id})}>\n                      {this.state.categories[id]}\n                    </div>\n                  )\n                })}\n              </div>\n          </div>\n      )\n  }\n\n  renderFinalScore(){\n    return(\n      <div className=\"quiz-play-holder\">\n        <div className=\"final-header\"> Your Final Score is {this.state.numCorrect}</div>\n        <div className=\"play-again button\" onClick={this.restartGame}> Play Again? </div>\n      </div>\n    )\n  }\n\n  evaluateAnswer = () => {\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\n    const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n    return answerArray.includes(formatGuess)\n  }\n\n  renderCorrectAnswer(){\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\n    let evaluate =  this.evaluateAnswer()\n    return(\n      <div className=\"quiz-play-holder\">\n        <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\n        <div className={`${evaluate ? 'correct' : 'wrong'}`}>{evaluate ? \"You were correct!\" : \"You were incorrect\"}</div>\n        <div className=\"quiz-answer\">{this.state.currentQuestion.answer}</div>\n        <div className=\"next-question button\" onClick={this.getNextQuestion}> Next Question </div>\n      </div>\n    )\n  }\n\n  renderPlay(){\n    return  this.state.forceEnd || this.state.lastQuestion\n      ? this.renderFinalScore()\n      : this.state.showAnswer \n        ? this.renderCorrectAnswer()\n        : (\n          <div className=\"quiz-play-holder\">\n            <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\n            <form onSubmit={this.submitGuess}>\n              <input type=\"text\" name=\"guess\" onChange={this.handleChange}/>\n              <input className=\"submit-guess button\" type=\"submit\" value=\"Submit Answer\" />\n            </form>\n          </div>\n        )\n  }\n\n\n  render() {\n    return this.state.quizCategory\n        ? this.renderPlay()\n        : this.renderPrePlay()\n  }\n}\n\nexport default QuizView;\n","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom'\n\n// import logo from './logo.svg';\nimport './stylesheets/App.css';\nimport FormView from './components/FormView';\nimport QuestionView from './components/QuestionView';\nimport Header from './components/Header';\nimport QuizView from './components/QuizView';\n\n\nclass App extends Component {\n  render() {\n    return (\n    <div className=\"App\">\n      <Header path />\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact component={QuestionView} />\n          <Route path=\"/add\" component={FormView} />\n          <Route path=\"/play\" component={QuizView} />\n          <Route component={QuestionView} />\n        </Switch>\n      </Router>\n    </div>\n  );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n //\"start\": \"HOST='127.0.0.1' PORT='5000' react-scripts start\",\n"],"sourceRoot":""}